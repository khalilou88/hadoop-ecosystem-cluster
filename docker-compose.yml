services:
  namenode:
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    image: apache/hadoop:3
    hostname: namenode
    command: ["hdfs", "namenode"]
    ports:
      - 9870:9870
    env_file:
      - ./config
    environment:
      ENSURE_NAMENODE_DIR: "/tmp/hadoop-root/dfs/name"
    # volumes:
    #   - namenode-data:/tmp/hadoop-root/dfs/name
    networks:
      - hadoop-network
    healthcheck:
      test: ["CMD", "hdfs", "dfsadmin", "-report"]
      interval: 30s
      timeout: 10s
      retries: 5

  datanode:
    image: apache/hadoop:3
    hostname: datanode
    command: ["hdfs", "datanode"]
    env_file:
      - ./config
    # volumes:
    #   - datanode-data:/tmp/hadoop-hadoop/dfs/data
    networks:
      - hadoop-network
    # depends_on:
    #   namenode:
    #     condition: service_healthy
    healthcheck:
      test: ["CMD", "hdfs", "dfsadmin", "-report"]
      interval: 30s
      timeout: 10s
      retries: 5

  resourcemanager:
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    image: apache/hadoop:3
    hostname: resourcemanager
    command: ["yarn", "resourcemanager"]
    ports:
      - 8088:8088
    env_file:
      - ./config
    volumes:
      - ./test.sh:/opt/test.sh
    networks:
      - hadoop-network
    # depends_on:
    #   namenode:
    #     condition: service_healthy
    #   datanode:
    #     condition: service_healthy
    healthcheck:
      test: ["CMD", "jps | grep ResourceManager"]
      interval: 30s
      timeout: 10s
      retries: 5

  nodemanager:
    image: apache/hadoop:3
    hostname: nodemanager
    command: ["yarn", "nodemanager"]
    env_file:
      - ./config
    networks:
      - hadoop-network
    # depends_on:
    #   resourcemanager:
    #     condition: service_healthy

  # MapReduce History Server
  historyserver:
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    image: apache/hadoop:3
    hostname: historyserver
    command: ["mapred", "historyserver"]
    ports:
      - 19888:19888
    env_file:
      - ./config
    volumes:
      - ./test.sh:/opt/test.sh
    networks:
      - hadoop-network
    # depends_on:
    #   namenode:
    #     condition: service_healthy
    #   resourcemanager:
    #     condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19888/ws/v1/history/info"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MapReduce Client/Submit Node
  mapreduce-client:
    image: apache/hadoop:3
    hostname: mapreduce-client
    command: ["tail", "-f", "/dev/null"] # Keep container running
    env_file:
      - ./config
    volumes:
      - ./test.sh:/opt/test.sh
      - ./mapreduce-jobs:/opt/mapreduce-jobs # Mount directory for job files
    networks:
      - hadoop-network
    # depends_on:
    #   namenode:
    #     condition: service_healthy
    #   resourcemanager:
    #     condition: service_healthy
    #   historyserver:
    #     condition: service_healthy

  # Spark Master
  spark-master:
    image: apache/spark:3.5.3
    hostname: spark-master
    command: ["./bin/spark-class", "org.apache.spark.deploy.master.Master"]
    ports:
      - 8080:8080  # Spark Master Web UI
      - 7077:7077  # Spark Master port
    env_file:
      - ./config
    environment:
      SPARK_MODE: master
      SPARK_MASTER_HOST: spark-master
      SPARK_MASTER_PORT: 7077
    volumes:
      - ./spark-apps:/opt/spark-apps  # For Spark application files
      - ./spark-data:/opt/spark-data  # For data files
    networks:
      - hadoop-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Spark Worker 1
  spark-worker-1:
    image: apache/spark:3.5.3
    hostname: spark-worker-1
    command: ["./bin/spark-class", "org.apache.spark.deploy.worker.Worker", "spark://spark-master:7077"]
    ports:
      - 8081:8081  # Spark Worker Web UI
    env_file:
      - ./config
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
    networks:
      - hadoop-network
    # depends_on:
    #   spark-master:
    #     condition: service_healthy

  # Spark Worker 2
  spark-worker-2:
    image: apache/spark:3.5.3
    hostname: spark-worker-2
    command: ["./bin/spark-class", "org.apache.spark.deploy.worker.Worker", "spark://spark-master:7077"]
    ports:
      - 8082:8081  # Spark Worker Web UI (mapped to different host port)
    env_file:
      - ./config
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
    networks:
      - hadoop-network
    # depends_on:
    #   spark-master:
    #     condition: service_healthy

  # Spark History Server
  spark-history-server:
    image: apache/spark:3.5.3
    hostname: spark-history-server
    command: ["./bin/spark-class", "org.apache.spark.deploy.history.HistoryServer"]
    ports:
      - 18080:18080  # Spark History Server Web UI
    env_file:
      - ./config
    environment:
      SPARK_HISTORY_OPTS: "-Dspark.history.fs.logDirectory=hdfs://namenode:9000/spark-logs"
    volumes:
      - ./spark-apps:/opt/spark-apps
    networks:
      - hadoop-network
    # depends_on:
    #   namenode:
    #     condition: service_healthy
    #   spark-master:
    #     condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:18080"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Spark Client/Submit Node
  spark-client:
    image: apache/spark:3.5.3
    hostname: spark-client
    command: ["tail", "-f", "/dev/null"] # Keep container running
    env_file:
      - ./config
    environment:
      SPARK_MASTER_URL: spark://spark-master:7077
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
      - ./test.sh:/opt/test.sh
    networks:
      - hadoop-network
    # depends_on:
    #   spark-master:
    #     condition: service_healthy

  # Hive Metastore Database (PostgreSQL)
  hive-metastore-db:
    image: postgres:13
    hostname: hive-metastore-db
    environment:
      POSTGRES_DB: metastore
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hive123
    # volumes:
    #   - hive-metastore-db-data:/var/lib/postgresql/data
    networks:
      - hadoop-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hive -d metastore"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Hive Metastore Service
  hive-metastore:
    image: apache/hive:4.0.1
    hostname: hive-metastore
    environment:
      SERVICE_NAME: metastore
      DB_DRIVER: postgres
      SERVICE_OPTS: >-
        -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver 
        -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://hive-metastore-db:5432/metastore 
        -Djavax.jdo.option.ConnectionUserName=hive 
        -Djavax.jdo.option.ConnectionPassword=hive123
    volumes:
      - ./postgresql-42.7.7.jar:/opt/hive/lib/postgresql.jar
    env_file:
      - ./config
    ports:
      - 9083:9083
    networks:
      - hadoop-network
    # depends_on:
    #   namenode:
    #     condition: service_healthy
    #   datanode:
    #      condition: service_healthy
    #   hive-metastore-db:
    #     condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9083"]
      interval: 30s
      timeout: 10s
      retries: 5

  # HiveServer2
  hiveserver2:
    image: apache/hive:4.0.1
    hostname: hiveserver2
    environment:
      SERVICE_NAME: hiveserver2
      IS_RESUME: "true"
      SERVICE_OPTS: >-
        -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver 
        -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://hive-metastore-db:5432/metastore 
        -Djavax.jdo.option.ConnectionUserName=hive 
        -Djavax.jdo.option.ConnectionPassword=hive123
        -Dhive.metastore.uris=thrift://hive-metastore:9083
    env_file:
      - ./config
    ports:
      - 10000:10000 # HiveServer2 Thrift port
      - 10002:10002 # HiveServer2 Web UI
    volumes:
      - ./postgresql-42.7.7.jar:/opt/hive/lib/postgresql.jar
    networks:
      - hadoop-network
    # depends_on:
    #   namenode:
    #     condition: service_healthy
    #   datanode:
    #     condition: service_healthy
    #   hive-metastore:
    #     condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "10000"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  hadoop-network:
    driver: bridge

# volumes:
# namenode-data:
# datanode-data:
# hive-metastore-db-data:
